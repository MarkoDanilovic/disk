// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    partial class StoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.3.22175.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Payment")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Bulevar umetnosti 16a",
                            City = "Beograd",
                            Comment = "",
                            OrderDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Payment = false,
                            PaymentMethod = "",
                            Subtotal = 14.52m,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("TrackId");

                    b.ToTable("CartItem", t =>
                    {
                        t.HasTrigger("dbo.cartitem_quantity_tr");
                    });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            Quantity = 1,
                            TrackId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("GenreName");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreName = "Techno"
                        },
                        new
                        {
                            Id = 2,
                            GenreName = "EDM"
                        });
                });

            modelBuilder.Entity("Core.Entities.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Label");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Sweden",
                            Email = "drumcode@gmail.com",
                            Name = "Drumcode"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Sweden",
                            Email = "le7els@gmail.com",
                            Name = "LE7ELS"
                        });
                });

            modelBuilder.Entity("Core.Entities.Medium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MediumName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Medium");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MediumName = "Vinyl"
                        },
                        new
                        {
                            Id = 2,
                            MediumName = "CD"
                        },
                        new
                        {
                            Id = 3,
                            MediumName = "Cassette tape"
                        });
                });

            modelBuilder.Entity("Core.Entities.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Producer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistName = "Avicii",
                            Birthday = new DateTime(1989, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Sweden",
                            Email = "avicii@gmail.com",
                            Name = "Tim",
                            Surname = "Bergling"
                        },
                        new
                        {
                            Id = 2,
                            ArtistName = "Sebastian Ingrosso",
                            Birthday = new DateTime(1983, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Sweden",
                            Email = "sebastianingrosso@gmail.com",
                            Name = "Sebastian",
                            Surname = "Ingrosso"
                        },
                        new
                        {
                            Id = 3,
                            ArtistName = "Amelie Lens",
                            Birthday = new DateTime(1990, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Belgium",
                            Email = "lens@gmail.com",
                            Name = "Amelie",
                            Surname = "Lens"
                        },
                        new
                        {
                            Id = 4,
                            ArtistName = "Joris Voorn",
                            Birthday = new DateTime(1977, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Country = "Netherlands",
                            Email = "jorisvoorn@gmail.com",
                            Name = "Joris",
                            Surname = "Voorn"
                        });
                });

            modelBuilder.Entity("Core.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("LabelId")
                        .HasColumnType("int");

                    b.Property<int>("MediumId")
                        .HasColumnType("int");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("LabelId");

                    b.HasIndex("MediumId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Track");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 8.23m,
                            GenreId = 1,
                            LabelId = 1,
                            MediumId = 1,
                            PictureUrl = "picture",
                            Price = 14.99m,
                            ProducerId = 3,
                            PublishDate = new DateTime(2018, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 100,
                            TrackName = "Your Mind"
                        },
                        new
                        {
                            Id = 2,
                            Duration = 4.29m,
                            GenreId = 2,
                            LabelId = 2,
                            MediumId = 2,
                            PictureUrl = "picture",
                            Price = 14.99m,
                            ProducerId = 1,
                            PublishDate = new DateTime(2011, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 5,
                            TrackName = "Levels"
                        },
                        new
                        {
                            Id = 3,
                            Duration = 6.57m,
                            GenreId = 1,
                            LabelId = 1,
                            MediumId = 3,
                            PictureUrl = "picture",
                            Price = 14.99m,
                            ProducerId = 4,
                            PublishDate = new DateTime(2012, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 25,
                            TrackName = "Goodbye fly"
                        },
                        new
                        {
                            Id = 4,
                            Duration = 3.23m,
                            GenreId = 2,
                            LabelId = 2,
                            MediumId = 2,
                            PictureUrl = "picture",
                            Price = 14.99m,
                            ProducerId = 2,
                            PublishDate = new DateTime(2017, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 20,
                            TrackName = "More than you know"
                        });
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Adresa 1",
                            City = "Novi Sad",
                            Country = "Serbia",
                            Email = "has@gmail.com",
                            Lastname = "Has",
                            Name = "Vitomir",
                            Password = "vitapuska",
                            Role = "User",
                            Telephone = "555333"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Moja adresa 359",
                            City = "Belgrade",
                            Country = "Serbia",
                            Email = "admin@admin.com",
                            Lastname = "Danilovic",
                            Name = "Marko",
                            Password = "admin",
                            Role = "Admin",
                            Telephone = "553265"
                        });
                });

            modelBuilder.Entity("Core.Entities.Cart", b =>
                {
                    b.HasOne("Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.CartItem", b =>
                {
                    b.HasOne("Core.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Core.Entities.Track", b =>
                {
                    b.HasOne("Core.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Medium", "Medium")
                        .WithMany()
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Label");

                    b.Navigation("Medium");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Core.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
